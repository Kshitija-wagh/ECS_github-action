name: Deploy to Amazon ECS
 
on:
  push:
    branches:
      - main
env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: mab  
 
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development
 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
 
      - name: Configure AWS credentials
        uses:  aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
 
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it 
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/kshitija:github.sha -f Dockerfile.yml .
          docker push $ECR_REGISTRY/kshitija:github.sha
          echo "image=$ECR_REGISTRY/kshitija:github.sha" >> $GITHUB_OUTPUT
      - name: Create ECS cluster
        run: |
          aws ecs create-cluster --cluster-name my-cluster

      - name: Register ECS task definition
        run: |
         aws ecs register-task-definition \
          --family my-task \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu "1024" \
          --memory "3072" \
          --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
          --container-definitions '[
            {
              "name": "my-container",
              "image": "${{ secrets.ECR_IMAGE_URI }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80
                }
              ]
            }
          ]'

      - name: Create ECS service
        run: |
         aws ecs create-service \
          --cluster my-cluster \
          --service-name my-service3 \
          --task-definition my-task \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration '{
            "awsvpcConfiguration": {
              "subnets": ["subnet-0763e0c1ea2d9439e"],
              "securityGroups": ["sg-0b36cb4c9ffd32ad0"],
              "assignPublicIp": "ENABLED"
            }
          }'
